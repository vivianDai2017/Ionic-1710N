WEBAPP

Ionic Day02

1. 页面 A 内部实现一个滑动列表，点击滑动列表中 item-options 跳向页面 B，
   B 页面内实现一个图片卡片
   1.1 创建页面 A 和 B
   1.2 从 HomePage 跳向 APage
   1.3 APage 中实现滑动列表
   1.4 BPage 中实现图片卡片
   1.5 从 APage 跳向 BPage

2. FAB 浮动操作按钮 Floating Action Button
   2.1 创建 fabPage，从 HomePage 跳向 FabPage
   2.2 基本
   2.3 居中

3. grid 栅格系统
   3.1 创建 grid，从 HomePage 跳向 GridPage
   3.2 基础等分
   3.3 指定宽度
   3.4 自动宽度
   3.5 列偏移
   3.6 垂直对齐

4. form 表单
   4.1 创建 form，从 HomePage 跳向 FormPage
   4.2 文本输入框
   4.3 密码输入框
   4.4 复选框
   4.5 日期输入框
   4.6 单选按钮
   4.7 下拉列表
   4.8 滑块
   4.9 开关
   4.10 提交按钮

5. Toast 提示 吐司
   5.1 创建 toast，从 HomePage 跳向 ToastPage
   5.2 在 toast.html 中，添加按钮，绑定 tap 事件
   5.3 在 toast.ts 中，定义函数 basicToast()
   5.4 import ToastController 控制器
   5.5 在构造器 constructor 中，定义参数 toastCtrl: ToastController
   5.6 在 basitToast 函数中，创建一个 toast 实例
   5.7 调用 toast.present()，显示消息提示

6. 练习：创建一个用户登录页面 signIn
         页面内实现一个登录表单，Email 和 Password
         点击提交按钮显示消息提示：Invalid Email or password.

7. alert 提示框
    7.1 创建 alert，从 HomePage 跳向 AlertPage
    7.2 在 alert.html 中，创建按钮，绑定 tap 事件
    7.3 在 alert.ts 中，定义函数 basicAlert();
    7.4 引入 AlertController
    7.5 DI 依赖注入 AlertController
    7.6 在 basicAlert 中，创建 alert 实例
    7.7 alert.present()，显示警告框

8. icon 字体图标
    8.1 创建 icon，从 HomePage 跳向 IconPage
    8.2 字体属性
    8.3 ios md
    8.4 属性绑定

9. Ionic 3 新特性：lazy loading 懒加载
    9.1 创建 lazy 页面
    9.2 修改 home.ts 文件，定义函数:
        toLazyPage():void {
            this.navCtrl.push('LazyPage');
        }
    9.3 修改 home.html 文件，添加按钮，绑定 tap 事件

10. 练习：把之前的所有页面改写为 lazy loading

11. 解压 app-components.zip，改目录名为 app-demo，放在 Ionic-1710N/ 下

12. 解压 server-demo.zip，放在 Ionic-1710N/ 下

13. Ionic 配合 Node.js 实现用户注册、登录、注销简单的系统

14. 先实现客户端首页 HomePage，添加登录表单和注册按钮

15. 创建 signUp 页面，点 Homepage 的注册按钮实现跳转

16. 在 signUp 页面中，添加注册表单

17. 创建文件 server-demo/sql/db.sql，建库建表

18. 使用 Node.js 和 Express 实现一个简单的服务器端

19. 创建目录 server-demo

20. 在 server-demo/ 执行 cmd：npm init 生成 package.json

21. 在 server-demo/ 执行 cmd：npm i -S express mysql body-parser

22. 在 server-demo/ 创建 app.js

23. 练习：实现客户端页面，建库建表，实现简单的服务器端

